{
	"info": {
		"_postman_id": "e1beec19-4b93-43ce-bb89-7928185c511f",
		"name": "process-api Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26956706"
	},
	"item": [
		{
			"name": "startup",
			"item": [
				{
					"name": "landingpage",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/",
							"host": [
								"{{url}}"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "conformance",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/conformance",
							"host": [
								"{{url}}"
							],
							"path": [
								"conformance"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test('Status code is 200 ', function(){",
							"    pm.response.to.have.status(200)",
							"});",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"if (pm.response.responseTime > 100) {",
							"    console.log(`⚠️ Warning: Response time is ${pm.response.responseTime}ms which is greater than 100ms.`);",
							"}"
						]
					}
				}
			]
		},
		{
			"name": "processes",
			"item": [
				{
					"name": "processes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const processData = pm.response.json().processes;\r",
									"\r",
									"pm.test(\"number of processes registered test\", function () {\r",
									"    pm.expect(processData.length).to.eql(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/processes?limit=1&offset=1",
							"host": [
								"{{url}}"
							],
							"path": [
								"processes"
							],
							"query": [
								{
									"key": "limit",
									"value": "1"
								},
								{
									"key": "offset",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "process-describe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const processData = pm.response.json();\r",
									"\r",
									"pm.test(\"id test\", function () {\r",
									"    pm.expect(processData[\"info\"][\"id\"]).to.eql(\"pyecho\");\r",
									"});\r",
									"\r",
									"pm.test(\"job control test\", function () {\r",
									"    pm.expect(processData[\"info\"][\"jobControlOptions\"][0]).to.eql(\"sync-execute\");\r",
									"});\r",
									"\r",
									"pm.test(\"image test\", function () {\r",
									"    pm.expect(processData[\"image\"]).to.eql(\"pyecho:latest\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/processes/:processID",
							"host": [
								"{{url}}"
							],
							"path": [
								"processes",
								":processID"
							],
							"variable": [
								{
									"key": "processID",
									"value": "pyecho"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "add-process",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"info\": {\r\n        \"version\": \"12.5.2023\",\r\n        \"id\": \"dfcTest\",\r\n        \"title\": \"Depth Frequency Curve\",\r\n        \"description\": \"Returns data for depth-frequency curve\",\r\n        \"jobControlOptions\": [\"async-execute\"],\r\n        \"outputTransmission\": [\"value\"]\r\n    },\r\n    \"host\": {\r\n        \"type\": \"aws-batch\",\r\n        \"jobDefinition\": \"process-sandbox:2\",\r\n        \"jobQueue\": \"micro-test\"\r\n    },\r\n    \"container\": {\r\n        \"command\": [\"python\", \"dfc.py\"]\r\n    },\r\n    \"inputs\": [\r\n        {\r\n            \"id\": \"crs\",\r\n            \"title\": \"crs\",\r\n            \"description\": \"\",\r\n            \"input\": {\r\n                \"literalDataDomain\": {\r\n                    \"dataType\": \"value\",\r\n                    \"valueDefinition\": {\r\n                        \"anyValue\": true,\r\n                        \"possibleValues\": null\r\n                    }\r\n                }\r\n            },\r\n            \"minOccurs\": 0,\r\n            \"maxOccurs\": 1\r\n        },\r\n        {\r\n            \"id\": \"tile\",\r\n            \"title\": \"tile\",\r\n            \"description\": \"\",\r\n            \"input\": {\r\n                \"literalDataDomain\": {\r\n                    \"dataType\": \"value\",\r\n                    \"valueDefinition\": {\r\n                        \"anyValue\": true,\r\n                        \"possibleValues\": null\r\n                    }\r\n                }\r\n            },\r\n            \"minOccurs\": 1,\r\n            \"maxOccurs\": 1\r\n        },\r\n        {\r\n            \"id\": \"epoch\",\r\n            \"title\": \"epoch\",\r\n            \"description\": \"\",\r\n            \"input\": {\r\n                \"literalDataDomain\": {\r\n                    \"dataType\": \"value\",\r\n                    \"valueDefinition\": {\r\n                        \"anyValue\": true,\r\n                        \"possibleValues\": null\r\n                    }\r\n                }\r\n            },\r\n            \"minOccurs\": 1,\r\n            \"maxOccurs\": 1\r\n        },\r\n        {\r\n            \"id\": \"points\",\r\n            \"title\": \"points\",\r\n            \"description\": \"\",\r\n            \"input\": {\r\n                \"literalDataDomain\": {\r\n                    \"dataType\": \"value\",\r\n                    \"valueDefinition\": {\r\n                        \"anyValue\": true,\r\n                        \"possibleValues\": null\r\n                    }\r\n                }\r\n            },\r\n            \"minOccurs\": 1,\r\n            \"maxOccurs\": 999999\r\n        }\r\n    ],\r\n    \"outputs\": [\r\n        {\r\n            \"id\": \"dfc\",\r\n            \"title\": \"dfc\",\r\n            \"description\": \"\",\r\n            \"output\": {\r\n                \"transmissionMode\": [\r\n                    \"value\"\r\n                ]\r\n            }\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/processes/:processID",
							"host": [
								"{{url}}"
							],
							"path": [
								"processes",
								":processID"
							],
							"variable": [
								{
									"key": "processID",
									"value": "dfcTest"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "update-process",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"info\": {\r\n        \"version\": \"12.5.2023\",\r\n        \"id\": \"dfcTest\",\r\n        \"title\": \"Depth Frequency Curve\",\r\n        \"description\": \"Returns data for depth-frequency curve\",\r\n        \"jobControlOptions\": [\"async-execute\"],\r\n        \"outputTransmission\": [\"value\"]\r\n    },\r\n    \"host\": {\r\n        \"type\": \"aws-batch\",\r\n        \"jobDefinition\": \"process-sandbox:2\",\r\n        \"jobQueue\": \"micro-test\"\r\n    },\r\n    \"container\": {\r\n        \"command\": [\"python\", \"dfc.py\"]\r\n    },\r\n    \"inputs\": [\r\n        {\r\n            \"id\": \"crs\",\r\n            \"title\": \"crs\",\r\n            \"description\": \"\",\r\n            \"input\": {\r\n                \"literalDataDomain\": {\r\n                    \"dataType\": \"value\",\r\n                    \"valueDefinition\": {\r\n                        \"anyValue\": true,\r\n                        \"possibleValues\": null\r\n                    }\r\n                }\r\n            },\r\n            \"minOccurs\": 0,\r\n            \"maxOccurs\": 1\r\n        },\r\n        {\r\n            \"id\": \"tile\",\r\n            \"title\": \"tile\",\r\n            \"description\": \"\",\r\n            \"input\": {\r\n                \"literalDataDomain\": {\r\n                    \"dataType\": \"value\",\r\n                    \"valueDefinition\": {\r\n                        \"anyValue\": true,\r\n                        \"possibleValues\": null\r\n                    }\r\n                }\r\n            },\r\n            \"minOccurs\": 1,\r\n            \"maxOccurs\": 1\r\n        },\r\n        {\r\n            \"id\": \"epoch\",\r\n            \"title\": \"epoch\",\r\n            \"description\": \"\",\r\n            \"input\": {\r\n                \"literalDataDomain\": {\r\n                    \"dataType\": \"value\",\r\n                    \"valueDefinition\": {\r\n                        \"anyValue\": true,\r\n                        \"possibleValues\": null\r\n                    }\r\n                }\r\n            },\r\n            \"minOccurs\": 1,\r\n            \"maxOccurs\": 1\r\n        },\r\n        {\r\n            \"id\": \"points\",\r\n            \"title\": \"points\",\r\n            \"description\": \"\",\r\n            \"input\": {\r\n                \"literalDataDomain\": {\r\n                    \"dataType\": \"value\",\r\n                    \"valueDefinition\": {\r\n                        \"anyValue\": true,\r\n                        \"possibleValues\": null\r\n                    }\r\n                }\r\n            },\r\n            \"minOccurs\": 1,\r\n            \"maxOccurs\": 999999\r\n        }\r\n    ],\r\n    \"outputs\": [\r\n        {\r\n            \"id\": \"dfc\",\r\n            \"title\": \"dfc\",\r\n            \"description\": \"\",\r\n            \"output\": {\r\n                \"transmissionMode\": [\r\n                    \"value\"\r\n                ]\r\n            }\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/processes/:processID",
							"host": [
								"{{url}}"
							],
							"path": [
								"processes",
								":processID"
							],
							"variable": [
								{
									"key": "processID",
									"value": "dfcTest"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "delete-process",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/processes/:processID",
							"host": [
								"{{url}}"
							],
							"path": [
								"processes",
								":processID"
							],
							"variable": [
								{
									"key": "processID",
									"value": "dfc2"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test('Status code is 200 ', function(){",
							"    pm.response.to.have.status(200)",
							"});",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"if (pm.response.responseTime > 100) {",
							"    console.log(`⚠️ Warning: Response time is ${pm.response.responseTime}ms which is greater than 100ms.`);",
							"}"
						]
					}
				}
			]
		},
		{
			"name": "execution",
			"item": [
				{
					"name": "general",
					"item": [
						{
							"name": "Negatives",
							"item": [
								{
									"name": "missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"inputs\": {\n        \"crs\": \"4326\",\n        \"points\": [\n            [\n                -76.491824,\n                37.271065\n            ]\n        ],\n        \"epoch\": \"2020\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/processes/:processID/execution",
											"host": [
												"{{url}}"
											],
											"path": [
												"processes",
												":processID",
												"execution"
											],
											"variable": [
												{
													"key": "processID",
													"value": "dfc"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "incorrectKey",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"inputs\": {\n        \"incorrectKey\": \"value\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/processes/:processID/execution",
											"host": [
												"{{url}}"
											],
											"path": [
												"processes",
												":processID",
												"execution"
											],
											"variable": [
												{
													"key": "processID",
													"value": "pyecho"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is equal or greater than 400\", function () {",
											"    pm.expect(pm.response.code).to.be.greaterThan(399)",
											"});",
											"",
											"pm.test(\"response should have message\", function () {",
											"    pm.response.to.have.jsonBody(\"message\");",
											"});"
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "sync",
					"item": [
						{
							"name": "Positives",
							"item": [
								{
									"name": "job-submit",
									"item": [
										{
											"name": "pyecho",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"inputs\": {\n        \"text\": \"Hello World!\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/processes/:processID/execution",
													"host": [
														"{{url}}"
													],
													"path": [
														"processes",
														":processID",
														"execution"
													],
													"variable": [
														{
															"key": "processID",
															"value": "pyecho"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var resp = pm.response.json()",
													"pm.collectionVariables.set(\"jobID\", resp[\"jobID\"])"
												]
											}
										}
									]
								},
								{
									"name": "job-details",
									"item": [
										{
											"name": "job-status",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"response should have jobid, status, etc\", function () {\r",
															"    pm.response.to.not.be.error;\r",
															"    pm.response.to.have.jsonBody(\"jobID\");\r",
															"    pm.response.to.have.jsonBody(\"status\");\r",
															"    pm.response.to.have.jsonBody(\"updated\");\r",
															"    pm.response.to.have.jsonBody(\"processID\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/jobs/:jobID",
													"host": [
														"{{url}}"
													],
													"path": [
														"jobs",
														":jobID"
													],
													"variable": [
														{
															"key": "jobID",
															"value": "{{jobID}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "job-logs",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/jobs/:jobID/logs",
													"host": [
														"{{url}}"
													],
													"path": [
														"jobs",
														":jobID",
														"logs"
													],
													"variable": [
														{
															"key": "jobID",
															"value": "{{jobID}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "job-results",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/jobs/:jobID/results",
													"host": [
														"{{url}}"
													],
													"path": [
														"jobs",
														":jobID",
														"results"
													],
													"variable": [
														{
															"key": "jobID",
															"value": "{{jobID}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "job-metadata",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/jobs/:jobID/metadata",
													"host": [
														"{{url}}"
													],
													"path": [
														"jobs",
														":jobID",
														"metadata"
													],
													"variable": [
														{
															"key": "jobID",
															"value": "{{jobID}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Status code is 200', function(){",
											"    pm.response.to.have.status(200)",
											"});",
											"",
											""
										]
									}
								}
							]
						},
						{
							"name": "Negatives",
							"item": [
								{
									"name": "job-dismiss",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/jobs/:jobID",
											"host": [
												"{{url}}"
											],
											"path": [
												"jobs",
												":jobID"
											],
											"variable": [
												{
													"key": "jobID",
													"value": "{{jobID}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is equal or greater than 400\", function () {",
											"    pm.expect(pm.response.code).to.be.greaterThan(399)",
											"});",
											"",
											"pm.test(\"response should have message\", function () {",
											"    pm.response.to.have.jsonBody(\"message\");",
											"});"
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "async",
					"item": [
						{
							"name": "Positives",
							"item": [
								{
									"name": "job-submit",
									"item": [
										{
											"name": "logHelloWorld",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var resp = pm.response.json()\r",
															"pm.collectionVariables.set(\"jobID\", resp[\"jobID\"])"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"inputs\": {}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/processes/:processID/execution",
													"host": [
														"{{url}}"
													],
													"path": [
														"processes",
														":processID",
														"execution"
													],
													"variable": [
														{
															"key": "processID",
															"value": "logHelloWorld"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "job-dismiss",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{url}}/jobs/:jobID",
													"host": [
														"{{url}}"
													],
													"path": [
														"jobs",
														":jobID"
													],
													"variable": [
														{
															"key": "jobID",
															"value": "{{jobID}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "logHelloWorld",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var resp = pm.response.json()\r",
															"pm.collectionVariables.set(\"jobID\", resp[\"jobID\"]);\r",
															"\r",
															"setTimeout(() => {}, 40000); "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"inputs\": {}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/processes/:processID/execution",
													"host": [
														"{{url}}"
													],
													"path": [
														"processes",
														":processID",
														"execution"
													],
													"variable": [
														{
															"key": "processID",
															"value": "logHelloWorld"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Response time is less than 1000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);",
													"});",
													"",
													"if (pm.response.responseTime > 500) {",
													"    console.log(`⚠️ Warning: Response time is ${pm.response.responseTime}ms which is greater than 500ms.`);",
													"}"
												]
											}
										}
									]
								},
								{
									"name": "job-details",
									"item": [
										{
											"name": "mock-aws-batch-event-running",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"postman.setGlobalVariable('timestampUtc', (new Date()).toISOString());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"status\": \"running\",\n    \"updated\": \"{{timestampUtc}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/jobs/:jobID/status",
													"host": [
														"{{url}}"
													],
													"path": [
														"jobs",
														":jobID",
														"status"
													],
													"variable": [
														{
															"key": "jobID",
															"value": "{{jobID}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "job-status",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"async process should be running or succeeded after 60 seconds\", function () {\r",
															"    pm.expect(pm.response.json()[\"status\"]).to.be.oneOf([\"running\",\"successful\"]);\r",
															"});\r",
															"\r",
															"pm.test(\"response should have jobid, status, etc\", function () {\r",
															"    pm.response.to.not.be.error;\r",
															"    pm.response.to.have.jsonBody(\"jobID\");\r",
															"    pm.response.to.have.jsonBody(\"status\");\r",
															"    pm.response.to.have.jsonBody(\"updated\");\r",
															"    pm.response.to.have.jsonBody(\"processID\");\r",
															"});\r",
															"\r",
															"setTimeout(() => {}, 50000); "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/jobs/:jobID",
													"host": [
														"{{url}}"
													],
													"path": [
														"jobs",
														":jobID"
													],
													"variable": [
														{
															"key": "jobID",
															"value": "{{jobID}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "mock-aws-batch-event-successful",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"postman.setGlobalVariable('timestampUtc', (new Date()).toISOString());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"status\": \"successful\",\n    \"updated\": \"{{timestampUtc}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/jobs/:jobID/status",
													"host": [
														"{{url}}"
													],
													"path": [
														"jobs",
														":jobID",
														"status"
													],
													"variable": [
														{
															"key": "jobID",
															"value": "{{jobID}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "job-logs",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(() => {}, 10000); "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const logs = pm.response.json().container_logs;\r",
															"\r",
															"pm.test(\"number of container logs\", function () {\r",
															"    pm.expect(logs.length).to.eql(3001);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/jobs/:jobID/logs",
													"host": [
														"{{url}}"
													],
													"path": [
														"jobs",
														":jobID",
														"logs"
													],
													"variable": [
														{
															"key": "jobID",
															"value": "{{jobID}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "job-results",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/jobs/:jobID/results",
													"host": [
														"{{url}}"
													],
													"path": [
														"jobs",
														":jobID",
														"results"
													],
													"variable": [
														{
															"key": "jobID",
															"value": "{{jobID}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "job-metadata",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/jobs/:jobID/metadata",
													"host": [
														"{{url}}"
													],
													"path": [
														"jobs",
														":jobID",
														"metadata"
													],
													"variable": [
														{
															"key": "jobID",
															"value": "{{jobID}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "job-submit",
							"item": [
								{
									"name": "logHelloWorld",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var resp = pm.response.json()\r",
													"pm.collectionVariables.set(\"jobID\", resp[\"jobID\"])"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"inputs\": {}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/processes/:processID/execution",
											"host": [
												"{{url}}"
											],
											"path": [
												"processes",
												":processID",
												"execution"
											],
											"variable": [
												{
													"key": "processID",
													"value": "logHelloWorld"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Response time is less than 1000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											"",
											"if (pm.response.responseTime > 500) {",
											"    console.log(`⚠️ Warning: Response time is ${pm.response.responseTime}ms which is greater than 500ms.`);",
											"}"
										]
									}
								}
							]
						},
						{
							"name": "Negatives",
							"item": [
								{
									"name": "job-logs-before-job-is-running",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/jobs/:jobID/logs",
											"host": [
												"{{url}}"
											],
											"path": [
												"jobs",
												":jobID",
												"logs"
											],
											"variable": [
												{
													"key": "jobID",
													"value": "{{jobID}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "job-metadata",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/jobs/:jobID/metadata",
											"host": [
												"{{url}}"
											],
											"path": [
												"jobs",
												":jobID",
												"metadata"
											],
											"variable": [
												{
													"key": "jobID",
													"value": "{{jobID}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "job-results",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/jobs/:jobID/results",
											"host": [
												"{{url}}"
											],
											"path": [
												"jobs",
												":jobID",
												"results"
											],
											"variable": [
												{
													"key": "jobID",
													"value": "{{jobID}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is equal or greater than 400\", function () {",
											"    pm.expect(pm.response.code).to.be.greaterThan(399)",
											"});",
											"",
											"pm.test(\"response should have message\", function () {",
											"    pm.response.to.have.jsonBody(\"message\");",
											"});"
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "jobs-list",
			"item": [
				{
					"name": "Positives",
					"item": [
						{
							"name": "number-of-jobs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jobsData = pm.response.json().jobs;",
											"",
											"pm.test(\"number of jobs in record test\", function () {",
											"    pm.expect(jobsData.length).to.eql(4);",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/jobs?",
									"host": [
										"{{url}}"
									],
									"path": [
										"jobs"
									],
									"query": [
										{
											"key": "",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "fetch-with-status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jobsData = pm.response.json().jobs;",
											"pm.test(\"All jobs have the 'successful' status\", function () {",
											"    jobsData.forEach(job => {",
											"        pm.expect(job.status).to.eql('successful');",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/jobs?status=successful",
									"host": [
										"{{url}}"
									],
									"path": [
										"jobs"
									],
									"query": [
										{
											"key": "status",
											"value": "successful"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "fetch-with-processID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jobsData = pm.response.json().jobs;",
											"pm.test(\"All jobs have the 'dfc' processID\", function () {",
											"    jobsData.forEach(job => {",
											"        pm.expect(job.processID).to.eql('dfc');",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/jobs?processID=dfc",
									"host": [
										"{{url}}"
									],
									"path": [
										"jobs"
									],
									"query": [
										{
											"key": "processID",
											"value": "dfc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "fetch-with-multiple-statuses",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/jobs?status=successful,failed",
									"host": [
										"{{url}}"
									],
									"path": [
										"jobs"
									],
									"query": [
										{
											"key": "status",
											"value": "successful,failed"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200 ', function(){",
									"    pm.response.to.have.status(200)",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Negatives",
					"item": [
						{
							"name": "fetch-with-invalid-status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/jobs?status=invalidStatus",
									"host": [
										"{{url}}"
									],
									"path": [
										"jobs"
									],
									"query": [
										{
											"key": "status",
											"value": "invalidStatus"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "fetch-with-invalid-processID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/jobs?processID=invalidProcessID",
									"host": [
										"{{url}}"
									],
									"path": [
										"jobs"
									],
									"query": [
										{
											"key": "processID",
											"value": "invalidProcessID"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is equal or greater than 400\", function () {",
									"    pm.expect(pm.response.code).to.be.greaterThan(399)",
									"});",
									"",
									"pm.test(\"response should have message\", function () {",
									"    pm.response.to.have.jsonBody(\"message\");",
									"});"
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"if (pm.response.responseTime > 500) {",
							"    console.log(`⚠️ Warning: Response time is ${pm.response.responseTime}ms which is greater than 500ms.`);",
							"}"
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"response must be valid and have a body\", function () {",
					"     pm.response.to.be.withBody;",
					"     pm.response.to.be.json;",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "localhost:5050",
			"type": "default"
		},
		{
			"key": "jobID",
			"value": ""
		}
	]
}